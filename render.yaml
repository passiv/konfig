#####
# Documentation
# Redwood: https://render.com/docs/deploy-redwood
# YAML (all config values): https://render.com/docs/yaml-spec
#####

services:
  # - name: splitit-web-polling
  #   type: cron
  #   env: node
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/konfig-dev/splitit-web-sdks
  #   startCommand: ./node_modules/.bin/konfig pull && ./node_modules/.bin/konfig push -o konfig-dev -r splitit-web-sdks -s swagger.json
  # - name: composio-polling
  #   type: cron
  #   env: node
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/konfig-dev/composio-sdks
  #   startCommand: ./node_modules/.bin/konfig pull && ./node_modules/.bin/konfig push -o konfig-dev -r composio-sdks -s composio.json
  # - name: leap-workflows-polling
  #   type: cron
  #   env: node
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/leap-ai/workflows-sdks
  #   startCommand: ./node_modules/.bin/konfig pull && ./node_modules/.bin/konfig push -o leap-ai -r workflows-sdks -s api.json
  # - name: carbon-polling
  #   type: cron
  #   env: node
  #   schedule: "0 0 * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/Carbon-for-Developers/carbon-sdks
  #   startCommand: ./node_modules/.bin/konfig pull && ./node_modules/.bin/konfig push -o Carbon-for-Developers -r carbon-sdks -s openapi.json
  # - name: newscatcher-polling-v3
  #   type: cron
  #   env: node
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/konfig-dev/newscatcher-sdks
  #   startCommand: ./node_modules/.bin/konfig pull -i https://v3-api.newscatcherapi.com/docs/openapi.json -o openapi.json && ./node_modules/.bin/konfig push -o konfig-dev -r newscatcher-sdks -s openapi.json -x v3
  # - name: humanloop-polling-v4
  #   type: cron
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   env: node
  #   repo: https://github.com/konfig-dev/automation
  #   startCommand: ./node_modules/.bin/konfig pull -i https://api.humanloop.com/v4/openapi.json -o openapi.json && ./node_modules/.bin/konfig push -o humanloop -r humanloop-sdks -s openapi.json -x v4
  # - name: humanloop-polling-v4-alpha
  #   type: cron
  #   env: node
  #   schedule: "*/30 * * * *"
  #   buildCommand: npm init -y; npm install konfig-cli
  #   repo: https://github.com/konfig-dev/automation
  #   startCommand: ./node_modules/.bin/konfig pull -i https://neostaging.humanloop.ml/v4/openapi.json -o openapi.json && ./node_modules/.bin/konfig push -o humanloop -r humanloop-sdks -s openapi.json -x v4-alpha

  - name: konfigthis.com
    type: web
    env: static
    buildCommand: yarn; yarn export
    staticPublishPath: ./out
    repo: https://github.com/passiv/konfig
    rootDir: konfigthis.com
    routes:
      - type: rewrite
        source: /*
        destination: https://docs.konfigthis.com/*

  - name: konfig-demo-product-landing-page
    type: web
    env: static
    buildCommand: yarn; yarn build; yarn next export
    staticPublishPath: ./out
    repo: https://github.com/passiv/konfig
    rootDir: misc/konfig-demo-product-landing-page
    # domains:
    #   - apidemo.konfigthis.com

  - type: redis
    name: github-api-cache
    ipAllowList: [] # only allow internal connections
    plan: free

  - name: konfig-demo-portal
    type: web
    env: node
    buildCommand: ./build-render.sh
    startCommand: yarn start;
    repo: https://github.com/passiv/konfig
    rootDir: generator/konfig-next-app
    plan: standard
    autoDeploy: false
    buildFilter:
      paths:
      - generator/konfig-dash/**/*
    envVars:
      - key: GITHUB_API_REDIS_CACHE
        fromService:
          name: github-api-cache
          type: redis
          property: connectionString
      - key: PYTHON_RCE_API_HOST_PORT
        fromService:
          name: konfig-python-remote-code-executor
          type: pserv
          property: hostport
      - fromGroup: cloudflare
      - fromGroup: openai
      # - fromGroup: github
      - key: OPENAI_API_KEY
        sync: false
      - key: NPM_TOKEN
        value: DUMMY_VALUE
      - key: PORT
        value: 10000

  # - name: konfig-demo-portal-staging
  #   type: web
  #   env: node
  #   buildCommand: ./build-render.sh
  #   startCommand: ./start-render.sh
  #   repo: https://github.com/passiv/konfig
  #   rootDir: generator/konfig-next-app
  #   plan: standard
  #   buildFilter:
  #     paths:
  #     - generator/konfig-dash/**/*
  #   # domains:
  #   #   - "*.konfig.dev"
  #   envVars:
  #     - key: GITHUB_API_REDIS_CACHE
  #       fromService:
  #         name: github-api-cache
  #         type: redis
  #         property: connectionString
  #     - key: PYTHON_RCE_API_HOST_PORT
  #       fromService:
  #         name: konfig-python-remote-code-executor
  #         type: pserv
  #         property: hostport
  #     - fromGroup: openai
  #     - fromGroup: cloudflare
      # - fromGroup: github
  #     - key: OPENAI_API_KEY
  #       sync: false
  #     - key: NPM_TOKEN
  #       value: DUMMY_VALUE
  #     - key: PORT
  #       value: 10000

  # - name: konfig-changeset-bot
  #   type: web
  #   plan: free
  #   env: node
  #   region: oregon
  #   repo: https://github.com/passiv/konfig
  #   rootDir: generator/konfig-changeset-bot
  #   # domains:
  #   #   - changeset-bot.konfigthis.com
  #   buildCommand: yarn; yarn next build
  #   startCommand: yarn next start
  #   envVars:
  #     - fromGroup: konfig-changeset-bot

  # - name: konfig-api-sales
  #   type: web
  #   plan: starter
  #   env: node
  #   region: oregon
  #   repo: https://github.com/passiv/konfig
  #   rootDir: generator/konfig-dash
  #   buildCommand: yarn && yarn build && yarn rw build api
  #   startCommand: yarn rw deploy render api --prisma=false --data-migrate=false
  #   autoDeploy: false
  #   envVars:
  #     - fromGroup: npm
  #     - fromGroup: aws
      # - fromGroup: github
  #     - key: SESSION_SECRET
  #       generateValue: true
  #     - key: SKIP_INSTALL_DEPS
  #       value: true
  #     - key: NODE_VERSION
  #       value: 16
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: konfig-db
  #         property: connectionString
  #     - key: GENERATOR_API_HOST_PORT
  #       fromService:
  #         name: konfig-openapi-generator-api-sales
  #         type: pserv
  #         property: hostport
  #     - key: BLACKD_API_HOST_PORT
  #       fromService:
  #         name: konfig-python-formatter
  #         type: pserv
  #         property: hostport
  #     - key: PYTHON_RCE_API_HOST_PORT
  #       fromService:
  #         name: konfig-python-remote-code-executor
  #         type: pserv
  #         property: hostport

  # - type: pserv
  #   name: konfig-openapi-generator-api-sales
  #   env: docker
  #   rootDir: generator/konfig-generator-api
  #   repo: https://github.com/passiv/konfig
  #   autoDeploy: false
  #   envVars:
  #     - fromGroup: aws
  #     - key: PORT
  #       value: 8080

  - name: konfig-api
    type: web
    plan: starter
    env: node
    region: oregon
    repo: https://github.com/passiv/konfig
    rootDir: generator/konfig-dash
    # domains:
    #   - api.konfigthis.com
    buildCommand: ./bash-scripts/build-render.sh
    startCommand: yarn rw deploy render api --prisma=false --data-migrate=false
    envVars:
      - fromGroup: npm
      - fromGroup: aws
      # - fromGroup: github
      - key: NOTION_API_KEY
        sync: false
      - key: SESSION_SECRET
        generateValue: true
      - key: SKIP_INSTALL_DEPS
        value: true
      - key: NODE_VERSION
        value: 16
      - key: DATABASE_URL
        fromDatabase:
          name: konfig-db
          property: connectionString
      - key: GENERATOR_API_HOST_PORT
        fromService:
          name: konfig-openapi-generator-api
          type: pserv
          property: hostport
      - key: BLACKD_API_HOST_PORT
        fromService:
          name: konfig-python-formatter
          type: pserv
          property: hostport
      - key: PYTHON_RCE_API_HOST_PORT
        fromService:
          name: konfig-python-remote-code-executor
          type: pserv
          property: hostport

  - type: pserv
    name: konfig-python-remote-code-executor
    env: python
    buildCommand: ./build-render.sh
    startCommand: ./start.sh
    repo: https://github.com/passiv/konfig
    rootDir: generator/konfig-python-remote-code-executor
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.16
      - key: PORT
        value: 8000

  - type: pserv
    name: konfig-python-formatter
    env: python
    buildCommand: ./build.sh
    startCommand: ./start.sh
    repo: https://github.com/passiv/konfig
    rootDir: generator/konfig-python-formatter-server-blackd

  - type: pserv
    name: konfig-openapi-generator-api
    env: docker
    rootDir: generator/konfig-generator-api
    repo: https://github.com/passiv/konfig
    envVars:
      - fromGroup: aws
      - key: PORT
        value: 8080

  - type: web
    env: static
    name: konfig-docs
    rootDir: generator/konfig-docs
    buildCommand: yarn install; yarn build
    staticPublishPath: ./build
    repo: https://github.com/passiv/konfig
    # domains:
    #   - docs.konfigthis.com
    envVars:
      - key: NODE_VERSION
        value: 18.18.0
      - key: NODE_OPTIONS
        value: "--max-old-space-size=8192"

databases:
  - name: konfig-db
    region: oregon
    plan: basic-256mb

envVarGroups:
  - name: cloudflare
    envVars:
      - key: CLOUDFLARE_IMAGES_API_KEY
        sync: false
  - name: openai
    envVars:
      - key: OPENAI_API_KEY
        sync: false
  - name: konfig-changeset-bot
    envVars:
      - key: APP_ID
        sync: false
      - key: GITHUB_CLIENT_ID
        sync: false
      - key: GITHUB_CLIENT_SECRET
        sync: false
      - key: PRIVATE_KEY
        sync: false
      - key: WEBHOOK_SECRET
        sync: false
  - name: npm
    envVars:
      - key: NPM_TOKEN
        sync: false
  - name: aws
    envVars:
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
